'use strict';



class Hamburger {
   constructor(size, stuffing){
     this._size = size;
     this._stuffing = stuffing;
     this._topping = [];
}



  addTopping(topping) {
    this._topping.includes(topping)?`This topping is allready included`:this._topping.push(topping);
  }
  removeTopping(topping){
    this._topping.includes(topping)?this._topping = this._topping.filter(item => item!== topping):'—ç—Ç–æ–π –¥–æ–±–∞–≤–∫–∏ —É –í–∞—Å –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç—É';
  }

  get toppings(){
    return this._topping;
  }

  get size() {
    return this._size;
  }

  get stuffing() {
    return this._stuffing;
  }
  calculatePrice() {
    let priceTopping = this._topping.map( item => Hamburger.TOPPINGS[item].price).reduce((acc,item) => acc+item,0);

    let calculate = Hamburger.SIZES[this.size].price + Hamburger.STUFFINGS[this.stuffing].price + priceTopping;
    return calculate;
  }
  calculateCalories() {
    let caloriesTopping = this._topping.map( item => Hamburger.TOPPINGS[item].calories).reduce((acc,item) => acc+item,0);

    let calculateCaloriesArr = Hamburger.SIZES[this.size].calories + Hamburger.STUFFINGS[this.stuffing].calories + caloriesTopping;
    return calculateCaloriesArr;
  }
}


Hamburger.SIZE_SMALL = 'SIZE_SMALL';
Hamburger.SIZE_LARGE = 'SIZE_LARGE';
Hamburger.STUFFING_CHEESE = 'STUFFING_CHEESE';
Hamburger.STUFFING_SALAD = 'STUFFING_SALAD';
Hamburger.STUFFING_MEAT = 'STUFFING_MEAT';
Hamburger.TOPPING_SPICE = 'TOPPING_SPICE';
Hamburger.TOPPING_SAUCE = 'TOPPING_SAUCE'


  Hamburger.SIZES = {
    [Hamburger.SIZE_SMALL]: {
        name: 'SIZE_SMALL',
        price: 30,
        calories: 50,
    },
     [Hamburger.SIZE_LARGE]: {
         name: 'SIZE_LARGE',
         price: 50,
         calories: 100,
     }
  };
  Hamburger.STUFFINGS = {
     [Hamburger.STUFFING_CHEESE]:{
      name: 'STUFFING_CHEESE',
      price: 15,
      calories: 20,
    },
    [Hamburger.STUFFING_SALAD]:{
      name: 'STUFFING_SALAD',
      price: 20,
      calories: 5,
    },
    [Hamburger.STUFFING_MEAT]:{
      name: 'STUFFING_MEAT',
      price: 35,
      calories: 15,
    },
  },
  Hamburger.TOPPINGS = {
     [Hamburger.TOPPING_SPICE]:{
      name: 'TOPPING_SPICE',
      price: 10,
      calories: 0,
    },
    [Hamburger.TOPPING_SAUCE]:{
      name: 'TOPPING_SAUCE',
      price: 15,
      calories: 5,
    },
  }


/* –í–æ—Ç –∫–∞–∫ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ */

// –ú–∞–ª–µ–Ω—å–∫–∏–π –≥–∞–º–±—É—Ä–≥–µ—Ä —Å –Ω–∞—á–∏–Ω–∫–æ–π –∏–∑ —Å—ã—Ä–∞
const hamburger = new Hamburger(Hamburger.SIZE_SMALL, Hamburger.STUFFING_CHEESE);

// –î–æ–±–∞–≤–∫–∞ –∏–∑ –ø—Ä–∏–ø—Ä–∞–≤—ã
hamburger.addTopping(Hamburger.TOPPING_SPICE);

// –°–ø—Ä–æ—Å–∏–º —Å–∫–æ–ª—å–∫–æ —Ç–∞–º –∫–∞–ª–æ—Ä–∏–π
console.log("Calories: ", hamburger.calculateCalories());

// –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?
console.log("Price: ", hamburger.calculatePrice());

// –Ø —Ç—É—Ç –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ —Ä–µ—à–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–æ—É—Å
hamburger.addTopping(Hamburger.TOPPING_SAUCE);

// –ê —Å–∫–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç?
console.log("Price with sauce: ", hamburger.calculatePrice());

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±–æ–ª—å—à–æ–π –ª–∏ –≥–∞–º–±—É—Ä–≥–µ—Ä?
console.log("Is hamburger large: ", hamburger.size === Hamburger.SIZE_LARGE); // -> false

// –£–±—Ä–∞—Ç—å –¥–æ–±–∞–≤–∫—É
hamburger.removeTopping(Hamburger.TOPPING_SPICE);

// –°–º–æ—Ç—Ä–∏–º —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–æ–∫
console.log("Hamburger has %d toppings", hamburger.toppings.length); // 1

/*
  üîî –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã:
    	‚úîÔ∏è –∫–ª–∞—Å—Å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –≤–Ω–µ—à–Ω–∏–º –º–∏—Ä–æ–º. –≠—Ç–æ –Ω–µ –µ–≥–æ –¥–µ–ª–æ, —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è
    		–¥—Ä—É–≥–æ–π –∫–æ–¥, –∞ –∫–ª–∞—Å—Å –∂–∏–≤–µ—Ç –≤ –∏–∑–æ–ª—è—Ü–∏–∏ –æ—Ç –º–∏—Ä–∞

    	‚úîÔ∏è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ä–∞–∑–º–µ—Ä –∏ –Ω–∞—á–∏–Ω–∫–∞) –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä,
		—á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç, –Ω–µ —É–∫–∞–∑–∞–≤ –∏—Ö

    	‚úîÔ∏è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ (–¥–æ–±–∞–≤–∫–∞) –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã

    	‚úîÔ∏è —Ç–∏–ø—ã –Ω–∞—á–∏–Ω–æ–∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω—ã "–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏" —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ—Å—Ç–æ
	    	—Å–≤–æ–π—Å—Ç–≤–∞–º–∏, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å —Å—á–∏—Ç–∞—Ç—å "–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏")

    	‚úîÔ∏è –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π.

    	‚úîÔ∏è –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –æ–±—ä–µ–∫—Ç–∞ –≥–∞–º–±—É—Ä–≥–µ—Ä–∞ –ª–æ–≥–∏—á–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–∞–∑–º–µ—Ä, —Ç–∏–ø –Ω–∞—á–∏–Ω–∫–∏),
      		–∞ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏–∑ –Ω–∏—Ö (—Ü–µ–Ω–∞, —á–∏—Å–ª–æ –∫–∞–ª–æ—Ä–∏–π –∏ —Ç.–¥.). –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Ü–µ–Ω—É –∏ –∫–∞–ª–æ—Ä–∏–∏
		–ª–æ–≥–∏—á–Ω–æ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –∞ –Ω–µ –∑–∞—Ä–∞–Ω–µ–µ.
*/
